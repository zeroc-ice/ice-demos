% Copyright (c) ZeroC, Inc.

function client(args)
    % We put the code generated by the Slice compiler in the 'generated' subdirectory.
    addpath('generated');

    % Load the Ice library if it is not already loaded.
    if ~libisloaded('ice')
        loadlibrary('ice', @iceproto);
    end

    % The Slice module VisitorCenter maps to a MATLAB package with the same name.
    import VisitorCenter.*

    if nargin == 0
        args = {};
    end

    % Set the Ice.ImplicitContext property to "Shared" before calling Ice.initialize.
    % This is only necessary for the implicit context API (see below).
    initData = Ice.InitializationData();
    [props, ~] = Ice.createProperties(args);
    initData.properties_ = props;
    initData.properties_.setProperty('Ice.ImplicitContext', 'Shared');

    % Create an Ice communicator to initialize the Ice runtime.
    communicator = Ice.initialize(initData);

    % Destroy communicator at the end of this function.
    cleanup = onCleanup(@() communicator.destroy());

    % GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
    % "stringified proxy" with the address of the target object.
    % If you run the server on a different computer, replace localhost in the string below with the server's hostname
    % or IP address.
    greeter = VisitorCenter.GreeterPrx(communicator, 'greeter:tcp -h localhost -p 4061');

    % Create a request context.
    context = containers.Map('KeyType', 'char', 'ValueType', 'char');

    % Send a request to the remote object and get the response. We request a French greeting by setting 'language' in
    % the context parameter.
    context('language') = 'fr';
    greeting = greeter.greet(char(java.lang.System.getProperty('user.name')), context);
    fprintf('%s\n', greeting);

    % Do it again, this time by setting the context on the proxy.
    context('language') = 'es';
    greeterEs = greeter.ice_context(context);
    greeting = greeterEs.greet('alice');
    fprintf('%s\n', greeting);

    % One more time, this time with an implicit context set on the communicator.
    communicator.getImplicitContext().put('language', 'de');
    greeting = greeter.greet('bob');
    fprintf('%s\n', greeting);

    rmpath('generated');
end
