% Copyright (c) ZeroC, Inc.

function client(args)
    if nargin == 0
        args = {};
    end

    % Load the Ice library if it is not already loaded.
    if ~libisloaded('ice')
        loadlibrary('ice', @iceproto);
    end

    % Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    communicator = Ice.initialize(args);

    % Destroy the communicator when the function exits.
    cleanup = onCleanup(@() communicator.destroy());

    % GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
    % "stringified proxy" with the address of the target object.
    % If you run the server on a different computer, replace localhost in the string below with the server's hostname
    % or IP address.
    greeter = visitorcenter.GreeterPrx(communicator, 'greeter:tcp -h localhost -p 4061');

    % Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
    slowGreeter = visitorcenter.GreeterPrx(communicator, 'slowGreeter:tcp -h localhost -p 4061');

    % Send a request to the regular greeter and get the response.
    greeting = greeter.greet(char(java.lang.System.getProperty('user.name')));
    fprintf('%s\n', greeting);

    % Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout is
    % infinite).
    slowGreeter4s = slowGreeter.ice_invocationTimeout(4000);

    % Send a request to the slow greeter with the 4-second invocation timeout.
    try
        greeting = slowGreeter4s.greet('alice');
        fprintf('Received unexpected greeting: %s\n', greeting);
    catch ex
        if isa(ex, 'Ice.InvocationTimeoutException')
            fprintf('Caught InvocationTimeoutException, as expected: %s\n', ex.message);
        else
            rethrow(ex);
        end
    end

    % Send a request to the slow greeter asynchronously, and cancel this request after 4 seconds.
    futureGreeting = slowGreeter.greetAsync('bob');
    pause(4);
    futureGreeting.cancel();

    try
        greeting = futureGreeting.fetchOutputs();
        fprintf('Received unexpected greeting: %s\n', greeting);
    catch ex
        if isa(ex, 'Ice.InvocationCanceledException')
            fprintf('Caught InvocationCanceledException, as expected: %s\n', ex.message);
        else
            rethrow(ex);
        end
    end

    % Verify the regular greeter still works.
    greeting = greeter.greet('carol');
    fprintf('%s\n', greeting);
end
