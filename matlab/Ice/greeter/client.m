% Copyright (c) ZeroC, Inc.

function client(args)
    if nargin == 0
        args = {};
    end

    % Load the Ice library if it is not already loaded.
    if ~libisloaded('ice')
        loadlibrary('ice', @iceproto);
    end

    % Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    communicator = Ice.initialize(args);

    % Destroy the communicator when the function exits.
    cleanup = onCleanup(@() communicator.destroy());

    % GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
    % "stringified proxy" with the address of the target object.
    % If you run the server on a different computer, replace localhost in the string below with the server's hostname
    % or IP address.
    greeter = visitorcenter.GreeterPrx(communicator, 'greeter:tcp -h localhost -p 4061');

    % Send a request to the remote object and wait synchronously for the response.
    greeting = greeter.greet(char(java.lang.System.getProperty('user.name')));
    fprintf('%s\n', greeting);

    % Send another request to the remote object, this time with greetAsync. greetAsync returns a future immediately.
    futureGreeting = greeter.greetAsync('alice');

    % Wait for the response.
    greeting = futureGreeting.fetchOutputs();
    fprintf('%s\n', greeting);
end
