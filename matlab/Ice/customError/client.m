% Copyright (c) ZeroC, Inc.

function client(args)
    if nargin == 0
        args = {};
    end

    % Load the Ice library if it is not already loaded.
    if ~libisloaded('ice')
        loadlibrary('ice', @iceproto);
    end

    % Configures the communicator to use a Slice loader that loads exception GreeterException. This is necessary in
    % MATLAB applications that unmarshal classes or exceptions, when the classes/exceptions or their enclosing module(s)
    % are remapped using matlab:identifier, like in this demo.
    initData = Ice.InitializationData();
    initData.properties_ = Ice.createProperties(args);
    initData.sliceLoader = Ice.ClassSliceLoader(?visitorcenter.GreeterException);

    % Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    communicator = Ice.initialize(initData);

    % Destroy the communicator when the function exits.
    cleanup = onCleanup(@() communicator.destroy());

    % GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
    % "stringified proxy" with the address of the target object.
    % If you run the server on a different computer, replace localhost in the string below with the server's hostname
    % or IP address.
    greeter = visitorcenter.GreeterPrx(communicator, 'greeter:tcp -h localhost -p 4061');

    names = {char(java.lang.System.getProperty('user.name')), '', 'alice', 'bob', 'carol', 'dave', 'billy bob'};

    for i = 1:length(names)
        name = names{i};

        % Send a request to the remote object and get the response. The response from the server can carry:
        % - a greeting (success)
        % - a dispatch exception (the base class for marshallable system exceptions), or
        % - a GreeterException (the custom exception we've defined in the Slice definitions)
        try
            greeting = greeter.greet(name);
            fprintf('%s\n', greeting);
        catch exception
            % Handle Ice.DispatchException
            if isa(exception, 'Ice.DispatchException')
                % Converts exception.replyStatus to an Ice.ReplyStatus enumerator. This fails when
                % exception.replyStatus does not correspond to a known enumerator.
                replyStatus = Ice.ReplyStatus.ice_getValue(exception.replyStatus);
                fprintf('Failed to create a greeting for ''%s'': DispatchException { message = ''%s'', replyStatus = %s }\n', ...
                    name, exception.message, char(replyStatus));
            % Handle GreeterException
            elseif isa(exception, 'visitorcenter.GreeterException')
                fprintf('Failed to create a greeting for ''%s'': GreeterException { errorMessage = ''%s'', error = %s }\n', ...
                    name, exception.errorMessage, char(exception.error));
            else
                rethrow(exception);
            end
        end
    end
end
