#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import asyncio
import signal
import sys

import chatbot
import Ice


async def main():
    loop = asyncio.get_running_loop()
    # Create an Ice communicator. We'll use this communicator to create an object adapter.
    # IceGrid starts this server with --Ice.Config=<config file generated by IceGrid>, so it's essential to initialize
    # this communicator with sys.argv args. We enable asyncio support by passing the current event loop to the
    # communicator constructor.
    with Ice.Communicator(sys.argv, eventLoop=loop) as communicator:
        # Shutdown the communicator when the user presses Ctrl+C.
        loop.add_signal_handler(signal.SIGINT, communicator.shutdown)

        # Create an object adapter. It's configured by the GreeterAdapter.* properties in the IceGrid-generated config
        # file.
        adapter = communicator.createObjectAdapter("GreeterAdapter")

        # Retrieve the greeter name and greeter identity from the IceGrid-generated config file.
        properties = communicator.getProperties()
        greeterName = properties.getProperty("Ice.ProgramName")
        greeterIdentity = Ice.stringToIdentity(properties.getProperty("Greeter.Identity"))

        # Register the Chatbot servant with the adapter.
        adapter.add(chatbot.Chatbot(greeterName), greeterIdentity)

        # Start dispatching requests.
        adapter.activate()
        print(f"{greeterName} is listening...")

        # Wait until the communicator is shut down.
        await communicator.shutdownCompleted()


if __name__ == "__main__":
    asyncio.run(main())
