# Copyright (c) ZeroC, Inc.

from EarlyRiser import AlarmClock, ButtonPressed

class MockAlarmClock(AlarmClock):
    """
    MockAlarmClock is an Ice servant that implements Slice interface AlarmClock
    """

    def __init__(self, eventLoop):
        self._needMoreTime = True
        self._eventLoop = eventLoop
        self._stopPressed = eventLoop.create_future()

    async def waitForStopPressed(self):
        """
        Gets a coroutine that completes when we return ButtonPressed.Stop from ring.
        """
        await self._stopPressed

    async def ring(self, message, current):
        """
        Implements the abstract method ring from the AlarmClock class generated by the Slice compiler.

        Parameters
        ----------
        message : str
            The message to display on the alarm clock.
        current : Ice.Current
            The context of the current Ice call.
        """
        print(f"Dispatching ring request {{ message = '{message}' }}")
        if self._needMoreTime:
            print(f"Returning {ButtonPressed.Snooze} to request more time.")
            self._needMoreTime = False # we only snooze one time
            return ButtonPressed.Snooze
        else:
            if not self._stopPressed.done():
                # Schedule set_result() to unblock waitForStopPressed() without causing a deadlock.
                # If set_result() runs immediately, it could block the event loop while waiting
                # for this dispatch to complete.
                self._eventLoop.call_soon(lambda: self._stopPressed.set_result(None))
            print(f"Returning {ButtonPressed.Stop} to stop the alarm.")
            return ButtonPressed.Stop
