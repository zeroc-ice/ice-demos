#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import Ice
import asyncio
import sys
import numpy
# Slice module Demo in Matrix.ice maps to Python module Demo.
import Demo

async def main():
    # Create an Ice communicator to initialize the Ice runtime. It will be automatically destroyed at the end of the
    # with block. We enable asyncio support by passing the current event loop to initialize.
    with Ice.initialize(sys.argv, eventLoop=asyncio.get_running_loop()) as communicator:

        # MatrixPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        matrix = Demo.MatrixPrx(communicator, "matrix:tcp -h localhost -p 4061")

        # Fetch a matrix from the server
        matrixData = await matrix.fetchDataAsync()

        # Numpy uses 'C' for row-major arrays, and 'F' for column-major
        major = 'C' if matrixData.type == Demo.MatrixType.RowMajor else 'F'
        print(type(matrixData.elements))
        # Convert the data to a numpy-array
        data = numpy.asarray(matrixData.elements, order=major).reshape((matrixData.axisLength, -1), order=major)
        # Convert the numpy-array into a numpy-matrix
        data = numpy.matrix(data)

        # Print the dimensions and elements of the matrix
        print(f"Received {str(data.shape[0])} by {str(data.shape[1])} matrix:")
        print(data)

        # Compute some properties of the matrix
        print(f"sum: {data.sum()}")
        print(f"average: {data.mean()}")
        print(f"standard deviation: {data.std()}")

if __name__ == "__main__":
    asyncio.run(main())
