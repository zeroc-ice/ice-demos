#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import Ice
import asyncio
import getpass
import sys

# Slice module VisitorCenter in Greeter.ice maps to Python module VisitorCenter.
from VisitorCenter import GreeterPrx

async def main():
    # Create an Ice communicator to initialize the Ice runtime. It will be automatically destroyed at the end of the
    # with block. We enable asyncio support by passing the current event loop to initialize.
    with Ice.initialize(sys.argv, eventLoop=asyncio.get_running_loop()) as communicator:

        # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        # If you run the server on a different computer, replace localhost in the string below with the server's hostname
        # or IP address.
        greeter = GreeterPrx(communicator, "greeter:tcp -h localhost -p 4061")

        # Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
        slowGreeter = GreeterPrx(communicator, "slowGreeter:tcp -h localhost -p 4061")

        # Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout is
        # infinite).
        slowGreeter4s = slowGreeter.ice_invocationTimeout(4000)

        # Send a request to the regular greeter and get the response.
        greeting = await greeter.greetAsync(getpass.getuser())
        print(greeting)


        # Send a request to the slow greeter with the 4-second invocation timeout.
        try:
            greeting = await slowGreeter4s.greetAsync("alice")
            print(f"Received unexpected greeting: {greeting}")
        except Ice.InvocationTimeoutException as exception:
            print(f"Caught InvocationTimeoutException, as expected: {exception}")

        # Send a request to the slow greeter, and cancel this request after 4 seconds.
        try:
            f = slowGreeter.greetAsync("bob")

            async def cancel():
                asyncio.sleep(4)
                f.cancel()

            asyncio.create_task(cancel())
            greeting = await f
            print(f"Received unexpected greeting: {greeting}")
        except asyncio.exceptions.CancelledError as exception:
            print(f"Caught CancelledError, as expected: {exception}")

        # Verify the regular greeter still works.
        greeting = await greeter.greetAsync("carol")
        print(greeting)

if __name__ == "__main__":
    asyncio.run(main())
