#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import asyncio
import getpass
import sys

import Ice

# Slice module VisitorCenter in Greeter.ice maps to Python module VisitorCenter.
import VisitorCenter


async def main():
    # Create Ice properties from the contents of the config.client file in the current working directory.
    initData = Ice.InitializationData()
    initData.properties = Ice.createProperties()
    initData.properties.load("config.client")

    # Configure the communicator to use asyncio.
    initData.eventLoopAdapter = Ice.asyncio.EventLoopAdapter(asyncio.get_running_loop())

    # Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    # The communicator gets its properties from initData.properties; Ice.* properties and other reserved properties set
    # in sys.argv override these properties.
    async with Ice.initialize(sys.argv, initData=initData) as communicator:
        # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        # If you run the server on a different computer, replace localhost in the string below with the server's hostname
        # or IP address.
        greeter = VisitorCenter.GreeterPrx.uncheckedCast(communicator.propertyToProxy("Greeter.Proxy"))
        assert greeter is not None

        # Send a request to the remote object and get the response.
        greeting = await greeter.greetAsync(getpass.getuser())
        print(greeting)


if __name__ == "__main__":
    asyncio.run(main())
