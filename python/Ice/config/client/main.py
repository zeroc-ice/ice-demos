#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import asyncio
import getpass
import sys

import Ice

# Slice module VisitorCenter in Greeter.ice maps to Python module VisitorCenter.
import VisitorCenter


async def main():
    # Load the contents of the config.client file into a Properties object.
    configFileProperties = Ice.createProperties()
    configFileProperties.load("config.client")

    # Create a Properties object from the command line arguments and the config file properties; Ice.* properties and
    # other reserved properties set in sys.argv augment or override the config file properties.
    properties = Ice.createProperties(sys.argv, configFileProperties)

    # Configure the communicator to use these properties and asyncio.
    initData = Ice.InitializationData(
        properties=properties, eventLoopAdapter=Ice.asyncio.EventLoopAdapter(asyncio.get_running_loop())
    )

    # Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    async with Ice.initialize(initData=initData) as communicator:
        # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        # If you run the server on a different computer, replace localhost in the string below with the server's hostname
        # or IP address.
        greeter = VisitorCenter.GreeterPrx.uncheckedCast(communicator.propertyToProxy("Greeter.Proxy"))
        assert greeter is not None

        # Send a request to the remote object and get the response.
        greeting = await greeter.greetAsync(getpass.getuser())
        print(greeting)


if __name__ == "__main__":
    asyncio.run(main())
