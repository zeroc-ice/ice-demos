#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import Ice
import asyncio
import getpass
import sys

# Slice module VisitorCenter in Greeter.ice maps to Python module VisitorCenter.
import VisitorCenter

async def main():

    # Get the current event loop.
    loop=asyncio.get_running_loop()

    # Create an Ice communicator to initialize the Ice runtime. It will be automatically destroyed at the end of the
    # with block.
    #
    # The event loop is passed to Ice.initialize so that the communicator is configured to use the
    # Ice.asyncio.EventLoopAdapter, ensuring that:
    # - Futures returned by the Ice runtime can be awaited within the asyncio event loop.
    # - Coroutines from asynchronous dispatches run within the same event loop.
    with Ice.initialize(sys.argv, eventLoop=loop) as communicator:

        # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        # If you run the server on a different computer, replace localhost in the string below with the server's hostname
        # or IP address.
        greeter = VisitorCenter.GreeterPrx(communicator, "greeter:tcp -h localhost -p 4061")

        # Send a request to the remote object and get the response.
        greeting = await greeter.greetAsync(getpass.getuser())
        print(greeting)

asyncio.run(main())
