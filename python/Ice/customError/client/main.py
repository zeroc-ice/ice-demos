#!/usr/bin/env python
# Copyright (c) ZeroC, Inc.

import asyncio
import getpass
import sys

import Ice

# Slice module VisitorCenter in Greeter.ice maps to Python module VisitorCenter.
import VisitorCenter


async def main():
    # Create an Ice communicator. We'll use this communicator to create proxies, and manage outgoing connections. We
    # enable asyncio support by passing the current event loop to the communicator constructor.
    async with Ice.Communicator(sys.argv, eventLoop=asyncio.get_running_loop()) as communicator:
        # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        # proxy" with the address of the target object.
        # If you run the server on a different computer, replace localhost in the string below with the server's hostname
        # or IP address.
        greeter = VisitorCenter.GreeterPrx(communicator, "greeter:tcp -h localhost -p 4061")

        names = [getpass.getuser(), "", "alice", "bob", "carol", "dave", "billy bob"]

        for name in names:
            # Send a request to the remote object and get the response. The response from the server can carry:
            # - a greeting (success)
            # - a dispatch exception (the base class for marshallable system exceptions), or
            # - a GreeterException (the custom exception we've defined in the Slice definitions)
            try:
                greeting = await greeter.greetAsync(name)
                print(greeting)
            except Ice.DispatchException as exception:
                print(
                    f"Failed to create a greeting for '{name}': DispatchException {{ message = '{exception.args}', replyStatus = {exception.replyStatus} }}"
                )
            except VisitorCenter.GreeterException as exception:
                print(
                    f"Failed to create a greeting for '{name}': GreeterException {{ message = '{exception.message}', error = {exception.error} }}"
                )


if __name__ == "__main__":
    asyncio.run(main())
