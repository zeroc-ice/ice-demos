// Copyright (c) ZeroC, Inc.

import Ice
import SwiftUI

/// Manages the Ice communicator and provides a method to send a greet request to the Greeter service.
class GreeterClient: ObservableObject {

    private let communicator: Communicator

    init() {
        do {
            // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
            communicator = try Ice.initialize()
        } catch {
            fatalError("Failed to initialize communicator: \(error)")
        }
    }

    deinit {
        // Ensures the communicator is cleanly destroyed when the client is deallocated.
        communicator.destroy()
    }

    func greet(user: String, host: String) async throws -> String {
        // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
        // proxy" that specifies the address of the target object.
        let greeter = try makeProxy(
            communicator: communicator,
            proxyString: "greeter:tcp -h \(host) -p 4061",
            type: GreeterPrx.self)

        // Sends a request to the remote object and returns the response.
        return try await greeter.greet(user)
    }
}
