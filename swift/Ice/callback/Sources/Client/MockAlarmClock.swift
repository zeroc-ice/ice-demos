// Copyright (c) ZeroC, Inc.

import Ice

/// MockAlarmClock is an Ice servant that implements Slice interface AlarmClock.
actor MockAlarmClock: AlarmClock {
    private var needMoreTime: Bool = true
    private var stopped: Bool = false
    private var stopContinuation: CheckedContinuation<Void, Never>? = nil

    // Implements the ring method from the AlarmClock protocol generated by the Slice compiler.
    func ring(message: String, current: Ice.Current) throws -> ButtonPressed {
        print("Dispatching ring request { message = '\(message)' }")

        if needMoreTime {
            print("Returning \(ButtonPressed.snooze) to request more time.")
            needMoreTime = false  // we only snooze one time
            return .snooze
        } else {
            // Press the stop button.
            stopped = true
            stopContinuation?.resume()
            stopContinuation = nil  // ensure the continuation is called only once
            print("Returning \(ButtonPressed.stop) to stop the alarm.")
            return .stop
        }
    }

    // Waits until the stop button is pressed.
    func stopPressed() async {
        if !stopped {
            await withCheckedContinuation { continuation in
                stopContinuation = continuation
            }
        }
    }
}
