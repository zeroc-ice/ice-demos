// Copyright (c) ZeroC, Inc.

import Foundation
import Ice

// Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
var args = CommandLine.arguments
let communicator = try Ice.initialize(&args)

// Destroy the communicator when the program exits.
defer {
    communicator.destroy()
}

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
let greeter = try makeProxy(
    communicator: communicator, proxyString: "greeter:tcp -h localhost -p 4061",
    type: GreeterPrx.self)

// Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
let slowGreeter = try makeProxy(
    communicator: communicator, proxyString: "slowGreeter:tcp -h localhost -p 4061",
    type: GreeterPrx.self)

// Send a request to the regular greeter and get the response.
var greeting = try await greeter.greet(NSUserName())
print(greeting)

// Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout is
// infinite).
let slowGreeter4s = slowGreeter.ice_invocationTimeout(4_000)  // in milliseconds

// Send a request to the slow greeter with the 4-second invocation timeout.
do {
    greeting = try await slowGreeter4s.greet("alice")
    print("Received unexpected greeting: \(greeting)")
} catch let error as Ice.InvocationTimeoutException {
    print("Caught InvocationTimeoutException, as expected: \(error)")
}

// Verify the regular greeter still works.
greeting = try await greeter.greet("bob")
print(greeting)

// Send a request to the slow greeter, and wait forever for the response.
print("Please press Ctrl+C in the server's terminal to cancel the slow greeter dispatch.")
do {
    greeting = try await slowGreeter.greet("carol")
    print(greeting)
} catch let error as Ice.UnknownException {
    print("Caught UnknownException, as expected: \(error)")
}
