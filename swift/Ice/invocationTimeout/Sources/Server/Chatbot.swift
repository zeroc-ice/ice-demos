// Copyright (c) ZeroC, Inc.

import Ice

/// Chatbot is an Ice servant that implements Slice interface Greeter.
// We use an actor to protect access to the outstandTasks set.
actor Chatbot: Greeter {
    private let delay: Duration?
    private var outstandingTasks: Set<Task<(), Error>> = []

    /// Initializes a Chatbot servant with a delay.
    /// - Parameter delay: The delay before returning each greeting.
    init(delay: Duration) {
        self.delay = delay
    }

    /// Initializes a Chatbot servant without a delay.
    init() {
        self.delay = nil
    }

    // Implements the protocol method greet from the Greeter protocol generated by the Slice compiler.
    func greet(name: String, current _: Ice.Current) async throws -> String {
        print("Dispatching greet request { name = '\(name)' }")
        if let delay = delay {
            let task = Task {
                try await Task.sleep(for: delay)
            }
            outstandingTasks.insert(task)
            defer {
                outstandingTasks.remove(task)
            }

            do {
                // Throws a CancellationError when the task is canceled by cancelOutstandingTasks.
                try await task.value
            } catch is CancellationError {
                print("greet dispatch canceled { name = '\(name)' }")
                throw UnknownException("greet dispatch canceled { name = '\(name)' }")
            }
        }
        return "Hello, \(name)!"
    }

    /// Cancels all outstanding tasks.
    func cancelOutstandingTasks() {
        for task in outstandingTasks {
            task.cancel()
        }
    }
}
