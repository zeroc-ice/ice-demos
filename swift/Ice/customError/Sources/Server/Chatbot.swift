// Copyright (c) ZeroC, Inc.

import Foundation
import Ice

/// Chatbot is an Ice servant that implements Slice interface Greeter.
struct Chatbot: Greeter {
    private let maxLength = 7

    // Implements the method greet from the Greeter protocol generated by the Slice compiler.
    func greet(name: String, current _: Ice.Current) throws -> String {
        print("Dispatching greet request { name = '\(name)' }")

        // Depending on the name, we return a greeting or throw an exception.
        switch name {
        case "":
            // ObjectNotExistException is a dispatch exception with a reply status of 'ObjectNotExist'.
            throw ObjectNotExistException()
        case "alice":
            // Simulate an authentication error by throwing a dispatch exception with the Unauthorized error code.
            // Note: This is a demo; no real authentication logic is implemented.
            throw DispatchException(
                replyStatus: ReplyStatus.unauthorized.rawValue,
                message: "Invalid credentials. The administrator has been notified.")
        case "bob":
            let nowPlus5min = Date(timeIntervalSinceNow: 5 * 60).formatted(date: .omitted, time: .complete)
            throw GreeterException(message: "Away until \(nowPlus5min)", error: .away)
        case "carol":
            throw GreeterException(message: "I am already greeting someone else.", error: .greetingOtherVisitor)
        default:
            guard name.count <= maxLength else {
                throw GreeterException(message: "Name is longer than maximum!", error: .nameTooLong)
            }
            return "Hello, \(name)!"
        }
    }
}
