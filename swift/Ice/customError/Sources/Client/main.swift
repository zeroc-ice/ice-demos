// Copyright (c) ZeroC, Inc.

import Foundation
import Ice

// Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
var args = CommandLine.arguments
let communicator = try Ice.initialize(&args)

// Destroy the communicator when the program exits.
defer {
    communicator.destroy()
}

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
let greeter = try makeProxy(
    communicator: communicator, proxyString: "greeter:tcp -h localhost -p 4061", type: GreeterPrx.self)

let names = [NSUserName(), "", "alice", "bob", "carol", "dave", "billy bob"]

for name in names {
    // Send a request to the remote object and get the response. The response from the server can carry:
    // - a greeting (success)
    // - a dispatch exception (the base class for marshallable system exceptions), or
    // - a GreeterException (the custom exception we've defined in the Slice definitions)
    do {
        let greeting = try await greeter.greet(name)
        print(greeting)
    } catch let exception as Ice.DispatchException {
        let replyStatusString =
            if let replyStatus = ReplyStatus(rawValue: exception.replyStatus) {
                "\(replyStatus)"
            } else {
                "unknown (\(exception.replyStatus))"
            }
        print(
            """
            Failed to create a greeting for '\(name)': \
            DispatchException { message = '\(exception.message)', replyStatus = \(replyStatusString) }
            """
        )
    } catch let exception as GreeterException {
        print(
            """
            Failed to create a greeting for '\(name)': \
            GreeterException { message = '\(exception.message)', error = \(exception.error) }
            """
        )
    }
}
