// Copyright (c) ZeroC, Inc.

import Ice

// Create an Ice communicator. We'll use this communicator to create an object adapter.
// IceGrid starts this server with --Ice.Config=<config file generated by IceGrid>, so it's essential to initialize
// this communicator with the command-line arguments.
var args = CommandLine.arguments
let communicator = try Ice.initialize(&args)

// Destroy the communicator when the program exits.
defer {
    communicator.destroy()
}

// Create an object adapter. It's configured by the GreeterAdapter.* properties in the IceGrid-generated config file.
let adapter = try communicator.createObjectAdapter("GreeterAdapter")

// Retrieve the greeter name and greeter identity from the IceGrid-generated config file.
let properties = communicator.getProperties()
let greeterName = properties.getProperty("Ice.ProgramName")
let greeterIdentity = try Ice.stringToIdentity(properties.getProperty("Greeter.Identity"))

// Register the Chatbot servant with the adapter.
try adapter.add(servant: Chatbot(greeterName: greeterName), id: greeterIdentity)

// Start dispatching requests.
try adapter.activate()
print("\(greeterName) is listening...")

// Wait until the communicator is shut down. IceGrid shuts down this communicator via its Ice.Admin object.
await communicator.shutdownCompleted()
