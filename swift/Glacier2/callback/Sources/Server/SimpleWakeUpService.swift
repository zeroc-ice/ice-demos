// Copyright (c) ZeroC, Inc.

import DateExtension
import Foundation
import Ice

/// SimpleWakeUpService is an Ice servant that implements Slice interface WakeUpService.
class SimpleWakeUpService: WakeUpService {
    // Implements the protocol method wakeMeUp from the WakeUpService protocol generated by the Slice compiler.
    func wakeMeUp(alarmClock: AlarmClockPrx?, timeStamp: Int64, current: Ice.Current) throws {
        // Make sure alarmClock is not nil.
        guard let alarmClock else {
            throw Ice.UnknownException("\(current.operation) requires a valid AlarmClock proxy")
        }

        // Convert the time stamp into a Date using our Date extension.
        let wakeUpTime = Date(timeStamp: timeStamp)
        let formattedTime = wakeUpTime.formatted(date: .omitted, time: .complete)

        print("Dispatching wakeMeUp request { alarmClock = '\(alarmClock)', timeStamp = '\(formattedTime))' }")

        // Schedule a wake-up call in a background task.
        Task {
            // Sleep until the wake up time.
            try await Task.sleep(for: .seconds(wakeUpTime.timeIntervalSince(Date())))

            // First ring. This invocation reuses the connection established by the client.
            var buttonPressed = try await alarmClock.ring("It's time to wake up!")

            // Keep ringing every 10 seconds until the user presses the stop button.
            while buttonPressed == .snooze {
                try await Task.sleep(for: .seconds(10))  // Sleep for 10 seconds.
                buttonPressed = try await alarmClock.ring("No more snoozing!")
            }
            print("Client pressed Stop on alarm clock.")
        }
    }
}
