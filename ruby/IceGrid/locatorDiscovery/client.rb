#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Configure the communicator to load the IceLocatorDiscovery plugin during initialization. This plugin will discover
# the locator (IceGrid registry in this demo) to use. As a result, we don't need to configure the default locator on
# this communicator.
initData = Ice::InitializationData.new()
initData.properties = Ice.createProperties(ARGV)
initData.properties.setProperty("Ice.Plugin.IceLocatorDiscovery", "1")

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
Ice::initialize(initData) do |communicator|

    # Create a proxy to the Greeter object hosted by the server(s). 'greeter' is a stringified proxy with no addressing
    # information, also known as a well-known proxy. It's specified by the <object> element in the IceGrid XML file.
    # The IceGrid registry resolves this well-known proxy and returns the actual address (endpoint) of the server to
    # this client.
    greeter = VisitorCenter::GreeterPrx.new(communicator, "greeter")

    # Send a request to the remote object and get the response.
    greeting = greeter.greet(Etc.getlogin)
    puts greeting

    # Send another request to the remote object. With the default configuration we use for this client, this request
    # reuses the connection and reaches the same server, even when we have multiple replicated servers.
    greeting = greeter.greet("alice")
    puts greeting
end
