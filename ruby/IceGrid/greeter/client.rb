#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
Ice::initialize(ARGV) do |communicator|

    # Set the default locator of the new communicator. It's the address of the Locator hosted by our IceGrid registry.
    # You can also set this proxy with the Ice.Default.Locator property.
    communicator.setDefaultLocator(Ice::LocatorPrx.new(communicator, 'IceGrid/Locator:tcp -h localhost -p 4061'))

    # Create a proxy to the Greeter object hosted by the server(s). 'greeter' is a stringified proxy with no addressing
    # information, also known as a well-known proxy. It's specified by the <object> element in the IceGrid XML file.
    # The IceGrid registry resolves this well-known proxy and returns the actual address (endpoint) of the server to
    # this client.
    greeter = VisitorCenter::GreeterPrx.new(communicator, "greeter")

    # Send a request to the remote object and get the response.
    greeting = greeter.greet(Etc.getlogin)

    puts greeting
end
