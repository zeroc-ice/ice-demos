#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Load the contents of the config.client file into a Properties object.
configFileProperties = Ice.createProperties()
configFileProperties.load("config.client")

# Create a Properties object from the command line arguments and the config file properties; Ice.* properties and
# other reserved properties set in ARGV override the config file properties.
properties = Ice.createProperties(ARGV, configFileProperties)

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
# The communicator gets its properties from the properties object.

Ice::initialize(Ice::InitializationData.new(properties)) do |communicator|
    # We create a Greeter proxy using the value of the Greeter.Proxy property in config.client.
    greeter = VisitorCenter::GreeterPrx.uncheckedCast(communicator.propertyToProxy("Greeter.Proxy"))

    # Send a request to the remote object and get the response.
    greeting = greeter.greet(Etc.getlogin)

    puts greeting
end
