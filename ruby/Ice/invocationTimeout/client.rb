#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

# Load the Ice and etc libraries.
require 'etc'
require 'Ice'

# The Slice module VisitorCenter maps to a Ruby package with the same name.
require_relative 'Greeter.rb'

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
Ice.initialize(ARGV) do |communicator|
    # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
    # proxy" with the address of the target object. If you run the server on a different computer, replace localhost in
    # the string below with the server's hostname or IP address.
    greeter = VisitorCenter::GreeterPrx.new(communicator, "greeter:tcp -h localhost -p 4061")

    # Create a proxy to the slow greeter with an invocation timeout of 4 seconds (the default invocation timeout is
    # infinite).
    slowGreeter = VisitorCenter::GreeterPrx.new(communicator, "slowGreeter:tcp -h localhost -p 4061")
                                           .ice_invocationTimeout(4000)

    # Send a request to the regular greeter and get the response.
    greeting = greeter.greet(Etc.getlogin)
    puts greeting

    # Send a request to the slow greeter with the 4-second invocation timeout.
    begin
        greeting = slowGreeter.greet("alice")
        puts "Received unexpected greeting: " + greeting
    rescue Ice::InvocationTimeoutException => exception
        puts "Caught expected exception: " + exception.to_s
    end

    # Verify the regular greeter still works.
    greeting = greeter.greet("bob")
    puts greeting
end
