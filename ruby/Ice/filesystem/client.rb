#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module Filesystem maps to a Ruby module with the same name.
require_relative 'Filesystem.rb'

# Recursively prints the contents directory "dir" in tree fashion.
# For files, show the contents of each file.
#
# @param [FileSystem::DirectoryPrx] dir The directory to list.
# @param [Integer] depth The current depth in the directory hierarchy.
def listRecursive(dir, depth)
    depth += 1
    indent = "\t" * depth

    contents = dir.list()

    for node in contents
        # Check if this node is a directory by asking the remote object.
        subdir = Filesystem::DirectoryPrx::checkedCast(node)
        print indent + node.name()
        if subdir
            puts "(directory):"
            listRecursive(subdir, depth)
        else # We assume it's a file if it's not a directory.
            file = Filesystem::FilePrx::uncheckedCast(node)
            puts "(file):"
            # Read and print the contents of the file.
            text = file.read()
            for line in text
                puts indent + "\t" + line
            end
        end
    end
end

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
Ice::initialize(ARGV) do |communicator|
    # Create a proxy for the root directory.
    rootDir = Filesystem::DirectoryPrx.new(communicator, "RootDir:tcp -h localhost -p 4061")

    # Recursively list the contents of the root directory.
    puts "Contents of root directory:"
    listRecursive(rootDir, 0)
end
