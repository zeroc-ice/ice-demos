#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Set the Ice.ImplicitContext property to 'Shared' before calling Ice.initialize.
# This is only necessary for the implicit context API (see below).
initData = Ice::InitializationData.new()
initData.properties = Ice.createProperties(ARGV)
initData.properties.setProperty('Ice.ImplicitContext', 'Shared')

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
Ice.initialize(initData) do |communicator|

    # GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
    # proxy" with the address of the target object. If you run the server on a different computer, replace localhost in
    # the string below with the server's hostname or IP address.
    greeter = VisitorCenter::GreeterPrx.new(communicator, "greeter:tcp -h localhost -p 4061")

    # Send a request to the remote object and get the response. We request a French greeting by setting 'language' in
    # the context parameter.
    greeting = greeter.greet(Etc.getlogin, {"language"=>"fr"})
    puts greeting

    # Do it again, this time by setting the context on the proxy.
    greeterEs = greeter.ice_context({"language"=>"es"})
    greeting = greeterEs.greet('alice')
    puts greeting

    # One more time, this time with an implicit context set on the communicator.
    communicator.getImplicitContext().put('language', 'de')
    greeting = greeter.greet('bob')
    puts greeting
end
