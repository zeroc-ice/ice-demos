// Copyright (c) ZeroC, Inc.

package com.example.ice.bidir.server;

import java.time.Duration;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.concurrent.CompletableFuture;

import com.example.earlyriser.AlarmClockPrx;
import com.example.earlyriser.ButtonPressed;
import com.example.earlyriser.WakeUpService;

import com.zeroc.Ice.Connection;
import com.zeroc.Ice.Current;
import com.zeroc.Ice.FeatureNotSupportedException;
import com.zeroc.Ice.Identity;

/// <summary>BidirWakeUpService is an Ice servant that implements Slice interface WakeUpService.</summary>
class BidirWakeUpService implements WakeUpService {
    /// <inheritdoc/>
    // Implements the abstract method WakeMeUp from the WakeUpServiceDisp_ class generated by the Slice compiler.
    public void wakeMeUp(long timeStamp, Current current) throws FeatureNotSupportedException {
        long millisecondsBeforeEpoch = 719162 * 24 * 60 * 60 * 1000; // daysBeforeEpoch converted to milliseconds
        long ticksPerMillisecond = 10_000; // number of ticks per millisecond
        long epochMilli = (timeStamp - millisecondsBeforeEpoch) / ticksPerMillisecond;

        ZonedDateTime timeStampDateTime = Instant.ofEpochMilli(epochMilli).atZone(ZoneOffset.UTC);

        System.out.println("Dispatching wakeMeUp request { timeStamp = '" + timeStampDateTime.toLocalTime() + "' }");

        Connection connection = current.con; // The connection from the client to the server.
        if (connection == null) {
            // Should never happen, but in case it does, the Ice runtime transmits this exception as an
            // Ice.UnknownException.
            throw new FeatureNotSupportedException("BidirWakeUpService does not support collocated calls");
        }

        // Create a proxy to the client's alarm clock. This connection-bound proxy is called a "fixed proxy".
        AlarmClockPrx alarmClock = AlarmClockPrx.uncheckedCast(connection.createProxy(new Identity("alarmClock", "")));

        // Start a background task to ring the alarm clock.
        CompletableFuture.runAsync(() -> {
            try {
                // Wait until the specified time.
                Duration delay = Duration.between(ZonedDateTime.now(ZoneOffset.UTC), timeStampDateTime);
                if (!delay.isNegative() && !delay.isZero()) {
                    Thread.sleep(delay.toMillis());
                }

                // First ring. This invocation reuses the connection established by the client.
                ButtonPressed buttonPressed = alarmClock.ring("It's time to wake up!");

                // Keep ringing every 10 seconds until the user presses the stop button.
                while (buttonPressed == ButtonPressed.Snooze) {
                    Thread.sleep(Duration.ofSeconds(10).toMillis());
                    buttonPressed = alarmClock.ring("No more snoozing!");
                }
                System.out.println("Client pressed Stop on alarm clock.");
            } catch (Exception ex) {
                System.err.println(ex);
            }
        });
    }
}