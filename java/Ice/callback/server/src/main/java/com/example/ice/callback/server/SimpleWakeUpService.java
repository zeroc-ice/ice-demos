// Copyright (c) ZeroC, Inc.

package com.example.ice.callback.server;

import java.time.Duration;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.concurrent.CompletableFuture;

import com.example.earlyriser.AlarmClockPrx;
import com.example.earlyriser.ButtonPressed;
import com.example.earlyriser.WakeUpService;
import com.example.util.Time;
import com.zeroc.Ice.Current;

/**
 * SimpleWakeUpService is an Ice servant that implements Slice interface WakeUpService.
 */
class SimpleWakeUpService implements WakeUpService {
    // Implements the method wakeMeUp from the WakeUpService interface generated by the Slice compiler.
    @Override
    public void wakeMeUp(AlarmClockPrx alarmClock, long timeStamp, Current current) {
        ZonedDateTime timeStampDateTime = Time.toZonedDateTime(timeStamp);

        System.out.println("Dispatching wakeMeUp request { timeStamp = '" + timeStampDateTime.toLocalTime() + "' }");

        // Start a background task to ring the alarm clock.
        CompletableFuture.runAsync(() -> {
            try {
                // Wait until the specified time.
                if (ZonedDateTime.now(ZoneOffset.UTC).isAfter(timeStampDateTime)) {
                    Thread.sleep(Duration.between(ZonedDateTime.now(ZoneOffset.UTC), timeStampDateTime).toMillis());
                }

                // First ring. This invocation reuses the connection established by the client.
                ButtonPressed buttonPressed = alarmClock.ring("It's time to wake up!");

                // Keep ringing every 10 seconds until the user presses the stop button.
                while (buttonPressed == ButtonPressed.Snooze) {
                    Thread.sleep(10_000);
                    buttonPressed = alarmClock.ring("No more snoozing!");
                }
                System.out.println("Client pressed Stop on alarm clock.");
            } catch (InterruptedException ex) {
                System.err.println(ex);
            }
        });
    }
}
