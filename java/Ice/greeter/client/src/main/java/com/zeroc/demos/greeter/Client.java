// Copyright (c) ZeroC, Inc.

package com.zeroc.demos.greeter;

import com.zeroc.demos.VisitorCenter.GreeterPrx;
import com.zeroc.Ice.Communicator;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

class Client {
    public static void main(String[] args) {
        // Create an Ice communicator to initialize the Ice runtime. The communicator is closed (destroyed) at the end
        // of the try statement.
        try (Communicator communicator = com.zeroc.Ice.Util.initialize(args)) {
            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

            // Send a request to the remote object and get the response.
            String greeting = greeter.greet(System.getProperty("user.name"));
            System.out.println(greeting);

            // Send another request to the remote object, this time with greetAsync.
            // 'greetAsync' returns a future immediately.
            CompletableFuture<String> futureGreeting = greeter.greetAsync("alice");

            try {
                greeting = futureGreeting.get();
                System.out.println(greeting);
            } catch (InterruptedException e) {
                assert false; // We don't interrupt this thread.
            } catch (ExecutionException e) {
                System.out.println("Could not get greeting: " + e.getMessage());
            }
        }
    }
}
