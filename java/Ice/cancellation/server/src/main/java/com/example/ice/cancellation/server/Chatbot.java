// Copyright (c) ZeroC, Inc.

package com.example.ice.cancellation.server;

import com.example.visitorcenter.Greeter;
import com.zeroc.Ice.Current;
import com.zeroc.Ice.UnknownException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.TimeUnit;

/**
 * Chatbot is an Ice servant that implements Slice interface Greeter.
 */
class Chatbot implements Greeter {
    private final long _delay;
    private final CompletableFuture<Void> _cancelDispatch;

    // Creates a new Chatbot instance with a delay in seconds.
    Chatbot(long delay, CompletableFuture<Void> cancelDispatch) {
        _delay = delay;
        _cancelDispatch = cancelDispatch;
    }

    // Creates a new Chatbot instance without a delay.
    Chatbot() {
        this(0, null);
    }

    // Implements the abstract method 'greet' from the Greeter interface generated by the Slice compiler.
    public String greet(String name, Current current) {
        System.out.println("Dispatching greet request { name = '" + name + "' }");

        if (_delay > 0) {
            try {
                // Wait for delay or until _cancelDispatch is completed.
                // This call blocks a dispatch thread from the Ice server thread pool, which means we need to configure
                // the Ice server thread pool to have enough threads.
                _cancelDispatch.get(_delay, TimeUnit.SECONDS);
                System.out.println("greet dispatch canceled { name = '" + name + "' }");
                throw new UnknownException("greet dispatch canceled.");
            } catch (TimeoutException e) {
                // Expected, proceed.
            }
            catch (InterruptedException | ExecutionException e) {
                // Unexpected, wrap and rethrow.
                throw new RuntimeException("Unexpected exception while waiting on cancelDispatch", e);
            }
        }

        return "Hello, " + name + "!";
    }
}
