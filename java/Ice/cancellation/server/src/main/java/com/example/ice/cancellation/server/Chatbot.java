// Copyright (c) ZeroC, Inc.

package com.example.ice.cancellation.server;

import com.example.visitorcenter.Greeter;
import com.zeroc.Ice.Current;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

/**
 * Chatbot is an Ice servant that implements Slice interface Greeter.
 */
class Chatbot implements Greeter
{
    private long _delay;
    private TimeUnit _timeUnit;

    // Creates a new Chatbot instance.
    public Chatbot(long delay, TimeUnit timeUnit) {
        _delay = delay;
        _timeUnit = timeUnit;
    }

    // Implements the abstract method 'greet' from the Greeter interface generated by the Slice compiler.
    // This variant is the synchronous implementation, but uses an executor to create a delay.
    public String greet(String name, Current current) {
        System.out.println("Dispatching greet request { name = '" + name + "' }");
        String greeting = "This message should not appear.";
        try {
            greeting = CompletableFuture.supplyAsync(
                () -> "Hello, " + name + "!",
                CompletableFuture.delayedExecutor(_delay, _timeUnit)
            ).get();
        }
        catch (InterruptedException exception) {
            System.out.println("Caught InterruptionException:" + exception.getMessage());
        } catch (ExecutionException exception) {
            System.out.println("Caught ExecutionException: " + exception.getMessage());
        }
        return greeting;
    }
}
