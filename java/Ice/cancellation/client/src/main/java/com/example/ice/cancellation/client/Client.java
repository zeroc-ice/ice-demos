// Copyright (c) ZeroC, Inc.

package com.example.ice.cancellation.client;

import com.example.visitorcenter.GreeterPrx;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.InvocationTimeoutException;
import com.zeroc.Ice.OperationInterruptedException;
import com.zeroc.Ice.Util;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

class Client {
    public static void main(String[] args) {
        // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
        try (Communicator communicator = Util.initialize(args)) {
            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

            // Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
            GreeterPrx slowgreeter =
                GreeterPrx.createProxy(communicator, "slowGreeter:tcp -h localhost -p 4061");

            // Send a request to the regular greeter and get the response.
            String greeting = greeter.greet(System.getProperty("user.name"));
            System.out.println(greeting);

            // Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout
            // is infinite).
            GreeterPrx slowgreeter4s = slowgreeter.ice_invocationTimeout(4);

            // Send a request to the slow greeter with the 4-second invocation timeout.
            try {
                greeting = slowgreeter4s.greet("alice");
                System.out.println(greeting);
            } catch (InvocationTimeoutException exception) {
                System.out.println("Caught InvocationTimeoutException, as expected: " + exception.getMessage());
            }

            // Send a request to the slow greeter, and cancel this request after 4 seconds.
            ScheduledExecutorService greetExecutor = Executors.newScheduledThreadPool(2);
            Future greetFuture = greetExecutor.submit(() -> {
                try {
                    String greetingEnclosed = slowgreeter.greet("bob");
                    System.out.println(greetingEnclosed);
                } catch (OperationInterruptedException exception) {
                    System.out.println("Caught OperationInterruptedException, as expected.");
                }
            });
            greetExecutor.schedule(() -> {greetFuture.cancel(true);}, 4L, TimeUnit.SECONDS);
            greetExecutor.shutdown();

            // Verify the regular greeter still works.
            greeting = greeter.greet("carol"); 
            System.out.println(greeting);

            // Send a request to the slow greeter, and wait forever for the response.
            System.out.println("Please press Ctrl+C in the server's terminal to cancel the slow greeter dispatch.");
            greeting = slowgreeter.greet("dave");
            System.out.println(greeting);
            
        }
    }
}
