// Copyright (c) ZeroC, Inc.

package com.example.ice.customerror.client;

import com.example.visitorcenter.GreeterException;
import com.example.visitorcenter.GreeterPrx;
import com.zeroc.Ice.ClassSliceLoader;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.DispatchException;
import com.zeroc.Ice.InitializationData;
import com.zeroc.Ice.Util;


class Client {
    public static void main(String[] args) {
        // Configures the communicator to use a Slice loader that loads exception GreeterException. This is necessary in
        // Java applications that unmarshal classes or exceptions, when the classes/exceptions or their enclosing
        // module(s) are remapped using java:identifier, like in this demo.
        var initData = new InitializationData();
        initData.sliceLoader = new ClassSliceLoader(GreeterException.class);

        // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
        try (Communicator communicator = Util.initialize(args, initData)) {

            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

            String[] names = {System.getProperty("user.name"), "", "alice", "bob", "carol", "dave", "billy bob"};

            for (String name : names) {
                // Send a request to the remote object and get the response. The response from the server can carry:
                // - a greeting (success)
                // - a dispatch exception (the base class for marshallable system exceptions), or
                // - a GreeterException (the custom exception we've defined in the Slice definitions)
                try {
                    String greeting = greeter.greet(name);
                    System.out.println(greeting);
                } catch (DispatchException exception) {
                    System.out.println(String.format("Failed to create a greeting for '%s': '%s' '%s'",
                        name, exception.getMessage(), exception.replyStatus));
                } catch (GreeterException exception) {
                    System.out.println(String.format(
                        "Failed to create a greeting for '%s': GreeterException {{ errorMessage = '%s', error = '%s' }}",
                        name, exception.errorMessage, exception.error
                    ));
                }
            }
        }
    }
}
