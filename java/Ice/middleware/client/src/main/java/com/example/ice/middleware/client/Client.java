// Copyright (c) ZeroC, Inc.

package com.example.ice.middleware.client;

import com.example.visitorcenter.GreeterPrx;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.DispatchException;
import com.zeroc.Ice.ReplyStatus;
import com.zeroc.Ice.Util;

import java.util.Map;

class Client {
    public static void main(String[] args) {
        // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
        try (Communicator communicator = Util.initialize(args)) {
            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

            // We hardcode the tokens in this demo, for simplicity. A real application would obtain the token from a
            // secure source.
            String validToken = "iced tea";

            try {
                String unexpected = greeter.greet(System.getProperty("user.name"), Map.of("token", "pineapple"));
                System.out.println("Received unexpected greeting: '" + unexpected + "'");
            } catch (DispatchException dispatchException) {
                if (ReplyStatus.valueOf(dispatchException.replyStatus) == ReplyStatus.Unauthorized) {
                    // Expected with an invalid (or missing) token. See AuthorizationMiddleware.
                } else {
                    throw dispatchException;
                }
            }

            // Send a request with the correct token in the request context.
            String greeting = greeter.greet(System.getProperty("user.name"), Map.of("token", validToken));

            System.out.println(greeting);
        }
    }
}
