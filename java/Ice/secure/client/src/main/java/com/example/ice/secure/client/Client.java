// Copyright (c) ZeroC, Inc.

package com.example.ice.secure.client;

import com.example.visitorcenter.GreeterPrx;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.Util;

import java.io.FileInputStream;
import java.io.IOException;

import java.security.cert.CertificateException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

class Client {
    public static void main(String[] args) {

        // The password for the PKCS12 keystore, hard-coded for simplicity.
        // In a production environment, use a secure method to store and retrieve this password.
        char[] password = "password".toCharArray();

        // Create and initialize an SSLContext object for the TLS protocol. The SSLContext is configured with the
        // custom a custom CA certificate, which is loaded from a PKCS12 keystore. This SSLContext will be used
        // to configure client's communicator.
        SSLContext sslContext;
        try {
            sslContext = SSLContext.getInstance("TLS");
            KeyStore keyStore = keyStore = KeyStore.getInstance("PKCS12");
            String keyStorePath = "../../../../certs/cacert.p12";
            try (var input = new FileInputStream(keyStorePath)) {
                keyStore.load(input, password);
            }
            TrustManagerFactory trustManagerFactory =
                TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(keyStore);
            sslContext.init(null, trustManagerFactory.getTrustManagers(), null);
        } catch (
            CertificateException|
            IOException|
            KeyManagementException|
            KeyStoreException|
            NoSuchAlgorithmException ex) {
            throw new RuntimeException("SSL initialization error.", ex);
        }

        var initData = new com.zeroc.Ice.InitializationData();
        initData.properties = new com.zeroc.Ice.Properties(args);
        
        // The clientSSLEngineFactory lambda provides the communicator with an SSLEngine that uses our custom
        // SSLContext for each outgoing secure connection.
        initData.clientSSLEngineFactory =
            (String peerHost, int peerPort) -> sslContext.createSSLEngine(peerHost, peerPort);

        // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
        try (Communicator communicator = Util.initialize(initData)) {
            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:ssl -h localhost -p 4061");

            // Send a request to the remote object and get the response.
            String greeting = greeter.greet(System.getProperty("user.name"));
            System.out.println(greeting);
        }
    }
}
