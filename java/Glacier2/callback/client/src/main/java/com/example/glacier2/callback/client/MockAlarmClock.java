// Copyright (c) ZeroC, Inc.

package com.example.glacier2.callback.client;

import java.util.concurrent.CompletableFuture;

import com.example.earlyriser.AlarmClock;
import com.example.earlyriser.ButtonPressed;
import com.zeroc.Ice.Current;

/**
 * MockAlarmClock is an Ice servant that implements Slice interface AlarmClock.
 */
class MockAlarmClock implements AlarmClock {
    private boolean _needMoreTime = true;

    private final CompletableFuture<Void> _stopPressed;

    public MockAlarmClock() {
        _stopPressed = new CompletableFuture<>();
    }

    public CompletableFuture<Void> stopPressed() {
        return _stopPressed;
    }

    // Implements the method ring from the AlarmClock interface generated by the Slice compiler.
    @Override
    public ButtonPressed ring(String message, Current current) {
        System.out.println("Dispatching ring request { message = '" + message + "' }");
        if (_needMoreTime) {
            System.out.println("Returning " + ButtonPressed.Snooze + " to request more time.");
            _needMoreTime = false; // we only snooze one time
            return ButtonPressed.Snooze;
        } else {
            _stopPressed.complete(null);
            System.out.println("Returning " + ButtonPressed.Stop + " to stop the alarm.");
            return ButtonPressed.Stop;
        }
    }
}
