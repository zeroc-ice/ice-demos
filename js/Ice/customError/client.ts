// Copyright (c) ZeroC, Inc.

import { Ice } from "@zeroc/ice";
import { VisitorCenter } from "./Greeter.js";
import process from "node:process";

// Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
await using communicator = new Ice.Communicator(process.argv);

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
const greeter = new VisitorCenter.GreeterPrx(communicator, "greeter:tcp -h localhost -p 4061");

// Retrieve my name
const name = process.env.USER || process.env.USERNAME || "masked user";

const names = [name, "", "alice", "bob", "carol", "dave", "billy bob"];

for (const name of names) {
    // Send a request to the remote object and get the response. The response from the server can carry:
    // - a greeting (success)
    // - a dispatch exception (the base class for marshallable system exceptions), or
    // - a GreeterException (the custom exception we've defined in the Slice definitions)
    try {
        const greeting = await greeter.greet(name);
        console.log(greeting);
    } catch (exception) {
        if (exception instanceof Ice.DispatchException) {
            console.log(
                `Failed to create a greeting for '${name}': DispatchException { message = '${exception.message}', replyStatus = ${exception.replyStatus} }`,
            );
        } else if (exception instanceof VisitorCenter.GreeterException) {
            console.log(
                `Failed to create a greeting for '${name}': GreeterException { message = '${exception.errorMessage}', error = ${exception.error} }`,
            );
        } else {
            throw exception;
        }
    }
}
