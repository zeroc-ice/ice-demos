// Copyright (c) ZeroC, Inc.

import { Ice } from "@zeroc/ice";
import { EarlyRiser } from "./AlarmClock.js";

export class MockAlarmClock extends EarlyRiser.AlarmClock {
    private _needMoreTime = true;
    private _resolveStop!: () => void;

    public readonly StopPressed: Promise<void>;

    constructor() {
        super();
        this.StopPressed = new Promise<void>((resolve) => {
            this._resolveStop = resolve;
        });
    }

    // Implements the abstract method ring from the AlarmClock class generated by the Slice compiler.
    ring(message: string, current: Ice.Current): EarlyRiser.ButtonPressed | Promise<EarlyRiser.ButtonPressed> {
        console.log(`Dispatching ring request { message = '${message}' }`);
        if (this._needMoreTime) {
            console.log("Returning ButtonPressed.Snooze to request more time.");
            this._needMoreTime = false; // we only snooze one time
            return EarlyRiser.ButtonPressed.Snooze;
        } else {
            this._resolveStop();
            console.log("Returning ButtonPressed.Stop to stop the alarm.");
            return EarlyRiser.ButtonPressed.Stop;
        }
    }
}
