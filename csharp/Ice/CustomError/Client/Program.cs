// Copyright (c) ZeroC, Inc.

// Slice module VisitorCenter in Greeter.ice maps to C# namespace VisitorCenter.
using VisitorCenter;

// Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
await using Ice.Communicator communicator = Ice.Util.initialize(ref args);

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
GreeterPrx greeter = GreeterPrxHelper.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

string[] names = [Environment.UserName, "", "alice", "bob", "carol", "dave", "billy bob"];

foreach (string name in names)
{
    // Send a request to the remote object and get the response. The response from the server can carry:
    // - a greeting (success)
    // - a dispatch exception (the base class for marshallable system exceptions), or
    // - a GreeterException (the custom exception we've defined in the Slice definitions)
    try
    {
        string greeting = await greeter.GreetAsync(name);
        Console.WriteLine(greeting);
    }
    catch (Ice.DispatchException exception)
    {
        Console.WriteLine(
            $"Failed to create a greeting for '{name}': DispatchException {{ Message = '{exception.Message}', replyStatus = {exception.replyStatus} }}");
    }
    catch (GreeterException exception)
    {
        Console.WriteLine(
            $"Failed to create a greeting for '{name}': GreeterException {{ ErrorMessage = '{exception.ErrorMessage}', Error = {exception.Error} }}");
    }
}
