// Copyright (c) ZeroC, Inc.

// Slice module VisitorCenter in Greeter.ice maps to C# namespace VisitorCenter.
using VisitorCenter;

// Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
using Ice.Communicator communicator = Ice.Util.initialize(ref args);

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
GreeterPrx greeter = GreeterPrxHelper.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

// Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
GreeterPrx slowGreeter = GreeterPrxHelper.createProxy(communicator, "slowGreeter:tcp -h localhost -p 4061");

// Send a request to the regular greeter and get the response.
string greeting = await greeter.GreetAsync(Environment.UserName);
Console.WriteLine(greeting);

// Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout is
// infinite).
var slowGreeter4s = GreeterPrxHelper.uncheckedCast(slowGreeter.ice_invocationTimeout(TimeSpan.FromSeconds(4)));

// Send a request to the slow greeter with the 4-second invocation timeout.
try
{
    greeting = await slowGreeter4s.GreetAsync("alice");
    Console.WriteLine($"Received unexpected greeting: {greeting}");
}
catch (Ice.InvocationTimeoutException exception)
{
    Console.WriteLine($"Caught InvocationTimeoutException, as expected: {exception.Message}");
}

// Send a request to the slow greeter, and cancel this request after 4 seconds.
using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(4));
try
{
    greeting = await slowGreeter.GreetAsync("bob", cancel: cts.Token);
    Console.WriteLine($"Received unexpected greeting: {greeting}");
}
catch (Ice.InvocationCanceledException exception)
{
    Console.WriteLine($"Caught InvocationCanceledException, as expected: {exception.Message}");
}

// Verify the regular greeter still works.
greeting = await greeter.GreetAsync("carol");
Console.WriteLine(greeting);

// Send a request to the slow greeter, and wait forever for the response.
Console.WriteLine("Please press Ctrl+C in the server's terminal to cancel the slow greeter dispatch.");
try
{
    greeting = await slowGreeter.GreetAsync("dave");
    Console.WriteLine(greeting);
}
catch (Ice.UnknownException exception)
{
    Console.WriteLine($"UnknownException, as expected: {exception.Message}");
}
