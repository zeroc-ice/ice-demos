// Copyright (c) ZeroC, Inc.

#include "Chatbot.h"

#include <Ice/Ice.h>
#include <iostream>

using namespace std;

int
main(int argc, char* argv[])
{
    // CtrlCHandler is a helper class that handles Ctrl+C and similar signals. It must be constructed at the beginning
    // of the program, before creating an Ice communicator or starting any thread.
    Ice::CtrlCHandler ctrlCHandler;

    // Create an Ice communicator. We'll use this communicator to create an object adapter.
    // IceGrid starts this server with --Ice.Config=<config file generated by IceGrid>, so it's essential to initialize
    // this communicator with argc, argv.
    Ice::CommunicatorPtr communicator = Ice::initialize(argc, argv);

    // Make sure the communicator is destroyed at the end of this scope.
    Ice::CommunicatorHolder communicatorHolder{communicator};

    // Create an object adapter. It's configured by the GreeterAdapter.* properties in the IceGrid-generated config
    // file.
    auto adapter = communicator->createObjectAdapter("GreeterAdapter");

    // Retrieve the greeter name and greeter identity from the IceGrid-generated config file.ls
    Ice::PropertiesPtr properties = communicator->getProperties();
    string greeterName = properties->getIceProperty("Ice.ProgramName");
    Ice::Identity greeterIdentity = Ice::stringToIdentity(properties->getProperty("Greeter.Identity"));

    // Register the Chatbot servant with the adapter.
    adapter->add(make_shared<Server::Chatbot>(std::move(greeterName)), greeterIdentity);

    // Start dispatching requests.
    adapter->activate();
    cout << "Listening..." << endl;

    // Shut down the communicator when the user presses Ctrl+C.
    ctrlCHandler.setCallback(
        [communicator](int signal)
        {
            cout << "Caught signal " << signal << ", shutting down..." << endl;
            communicator->shutdown();
        });

    // Wait until the communicator is shut down. Here, this occurs when the user presses Ctrl+C.
    communicator->waitForShutdown();

    return 0;
}
