// Copyright (c) ZeroC, Inc.

#include "../../common/Env.h"
#include "Greeter.h"

#include <Glacier2/Glacier2.h>
#include <Ice/Ice.h>
#include <cassert>
#include <iostream>

using namespace std;

int
main(int argc, char* argv[])
{
    // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    Ice::CommunicatorPtr communicator = Ice::initialize(argc, argv);

    // Make sure the communicator is destroyed at the end of this scope.
    Ice::CommunicatorHolder communicatorHolder{communicator};

    // Create a proxy to the Glacier2 router. The addressing information (transport, host and port number) is derived
    // from the value of Glacier2.Client.Endpoints in the glacier2 router configuration file.
    Glacier2::RouterPrx router{communicator, "Glacier2/router:tcp -h localhost -p 4063"};

    // Create a session with the Glacier2 router. In this demo, the Glacier2 router is configured to accept any
    // username/password combination. This call establishes a network connection to the Glacier2 router; the lifetime of
    // the session is the same as the lifetime of the connection.
    optional<Glacier2::SessionPrx> session = router->createSession(Env::getUsername(), "password");

    // The proxy returned by createSession is null because we did not configure a SessionManager on the Glacier2 router.
    assert(!session);

    // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
    // proxy" with the address of the target object.
    // If you run the server on a different computer, replace localhost in the string below with the server's hostname
    // or IP address.
    VisitorCenter::GreeterPrx greeter{communicator, "greeter:tcp -h localhost -p 4061"};

    // Configure the proxy to route requests using the Glacier2 router.
    greeter = greeter->ice_router(router);

    // Send a request to the remote object and wait synchronously for the response.
    // Both the -> and . syntax can be used to make invocations with the proxy.
    string greeting = greeter->greet(Env::getUsername());
    cout << greeting << endl;

    // Send a second request to observe the effect in the Glacier2 router log.
    greeting = greeter->greet("alice");
    cout << greeting << endl;

    return 0;
}
