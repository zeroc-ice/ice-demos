// Copyright (c) ZeroC, Inc.

#include "../../common/Env.h"
#include "Greeter.h"

#include <Ice/Ice.h>
#include <future>
#include <iostream>

using namespace std;

int
main(int argc, char* argv[])
{
    // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    Ice::CommunicatorPtr communicator = Ice::initialize(argc, argv);

    // Make sure the communicator is destroyed at the end of this scope.
    Ice::CommunicatorHolder communicatorHolder{communicator};

    // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
    // proxy" with the address of the target object.
    // If you run the server on a different computer, replace localhost in the string below with the server's hostname
    // or IP address.
    VisitorCenter::GreeterPrx greeter{communicator, "greeter:tcp -h localhost -p 4061"};

    std::vector<std::string> names{Env::getUsername(), "", "alice", "bob", "carol", "dave", "billy bob"};

    for (const auto& name : names)
    {
        // Send a request to the remote object and get the response. The response from the server can carry:
        // - a greeting (success)
        // - a dispatch exception (the base class for marshallable system exceptions), or
        // - a GreeterException (the custom exception we've defined in the Slice definitions)
        try
        {
            string greeting = greeter->greet(name);
            cout << greeting << endl;
        }
        catch (const Ice::DispatchException& exception)
        {
            cout << "Failed to create a greeting for '" << name << "': " << exception << endl;
        }
        catch (const VisitorCenter::GreeterException& exception)
        {
            cout << "Failed to create a greeting for '" << name << "': " << exception << endl;
        }
    }

    return 0;
}
