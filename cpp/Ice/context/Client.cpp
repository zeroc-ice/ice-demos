// Copyright (c) ZeroC, Inc.

#include "../../common/Env.h"
#include "Greeter.h"

#include <Ice/Ice.h>
#include <iostream>

using namespace std;

int
main(int argc, char* argv[])
{
    // Set the Ice.ImplicitContext property to "Shared" before creating the communicator.
    // This is only necessary for the implicit context API (see below).
    Ice::InitializationData initData;
    initData.properties = Ice::createProperties(argc, argv);
    initData.properties->setProperty("Ice.ImplicitContext", "Shared");

    // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
    Ice::CommunicatorPtr communicator = Ice::initialize(initData);

    // Make sure the communicator is destroyed at the end of this scope.
    Ice::CommunicatorHolder communicatorHolder{communicator};

    // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
    // proxy" with the address of the target object.
    // If you run the server on a different computer, replace localhost in the string below with the server's hostname
    // or IP address.
    VisitorCenter::GreeterPrx greeter{communicator, "greeter:tcp -h localhost -p 4061"};

    // Send a request to the remote object and get the response. We request a French greeting by setting the context
    // parameter.
    string greeting = greeter->greet(Env::getUsername(), {{"language", "fr"}});
    cout << greeting << endl;

    // Do it again, this time by setting the context on the proxy.
    auto greeterEs = greeter->ice_context({{"language", "es"}});
    greeting = greeterEs->greet("alice");
    cout << greeting << endl;

    // One more time, this time with an implicit context set on the communicator.
    communicator->getImplicitContext()->put("language", "de");
    greeting = greeter->greet("bob");
    cout << greeting << endl;

    return 0;
}
