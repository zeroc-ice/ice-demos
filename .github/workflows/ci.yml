name: CI

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]

# See https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# env:
#   Platform: x64 # For Msbuild
#   Configuration: Release # For Msbuild

jobs:
  ci:
    name: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            ice_build_flags: srcs
          - os: macos-14
            ice_build_flags: srcs
          - os: windows-2022
            ice_build_flags: /t:BuildDist

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Ice
        uses: actions/checkout@v4
        with:
          repository: zeroc-ice/ice
          ref: main
          path: ice

      - name: Setup Ice Build Dependencies
        uses: ./ice/.github/actions/setup-dependencies

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ice-demos

      - name: Install Nightly Ice Builds
        uses: ./ice-demos/.github/actions/install-nightly-ice

      - name: Build C++ Demos
        timeout-minutes: 20
        working-directory: ice-demos/cpp
        run: |
          set -o pipefail

          # No IceBT on macOS
          if [[ "$(uname)" == "Darwin" ]]; then
            rm -rf IceBT
          fi

          find . -name CMakeLists.txt -type f | while IFS= read -r file; do
            dir=$(dirname "$file");
            cmake -B "$dir/build" -S "$dir" -DCMAKE_BUILD_TYPE=Release -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
            cmake --build "$dir/build" --verbose
          done
        if: runner.os != 'Windows'

      - name: Build C++ Demos
        timeout-minutes: 20
        working-directory: ice-demos/cpp
        run: |
          # No IceBT on Windows
          Remove-Item -Recurse -Force "IceBT"

          $ErrorActionPreference = "Stop"

          Get-ChildItem -Recurse -Filter CMakeLists.txt | ForEach-Object {
              Write-Output "Processing: $_"
              $dir = $_.DirectoryName

              # Run cmake configure step
              cmake -B "$dir/build" -S "$dir" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
              if ($LASTEXITCODE -ne 0) { throw "CMake configuration failed" }

              # Run cmake build step
              cmake --build "$dir/build" --verbose --config Release
              if ($LASTEXITCODE -ne 0) { throw "CMake build failed" }
          }

        if: runner.os == 'Windows'

      - name: Build C# Demos
        timeout-minutes: 20
        working-directory: ice-demos/csharp
        run: |
          find . -name '*.sln' -type f | while IFS= read -r file; do
            dotnet build "$file"
          done
        if: runner.os != 'Windows'

      - name: Build C# Demos
        timeout-minutes: 20
        working-directory: ice-demos/csharp
        run: |
          $ErrorActionPreference = "Stop"
          Get-ChildItem -Recurse -Filter *.sln | ForEach-Object {
            dotnet build $_.FullName
           if ($LASTEXITCODE -ne 0) { throw "dotnet build failed" }
          }

        if: runner.os == 'Windows'

      # - name: Build Java Demos
      #   timeout-minutes: 20
      #   working-directory: ice-demos/java
      #   env:
      #     # For Ice Builder for Gradle
      #     CPP_PLATFORM: x64
      #     CPP_CONFIGURATION: Release
      #   run: ./gradlew build

      - name: Build JavaScript Demos
        timeout-minutes: 20
        working-directory: ice-demos/js
        run: |
          set -euxo pipefail
          find . -maxdepth 3 -name package.json -type f | while IFS= read -r file; do
              dir=$(dirname "$file");
              npm install --prefix "$dir"
              npm run --prefix "$dir" build
          done
        if: runner.os != 'Windows'

      - name: Build JavaScript Demos
        timeout-minutes: 20
        working-directory: ice-demos/js
        run: |
          Get-ChildItem -Recurse -Depth 2 -Filter package.json | ForEach-Object {
            cd $_.DirectoryName
            npm install
            if ($LASTEXITCODE -ne 0) { throw "npm install failed" }

            npm run build
            if ($LASTEXITCODE -ne 0) { throw "npm build failed" }
          }
        if: runner.os == 'Windows'

      - name: Build Swift Demos
        timeout-minutes: 20
        working-directory: ice-demos/swift
        run: |
          set -o pipefail
          find . -name Package.swift -type f | while IFS= read -r file; do
              swift build --package-path "$(dirname "$file")"
          done
        if: runner.os == 'macOS'
